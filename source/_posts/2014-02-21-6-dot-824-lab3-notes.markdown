---
layout: post
title: "6.824-lab3-notes"
date: 2014-02-21 14:08:02 +0800
comments: true
published: false
categories: 
---


Pre-read
-----
- [[Lecture Notes] Fault Tolerance: Paxos](http://pdos.csail.mit.edu/6.824-2013/notes/l05.txt)
- [[Paper] Paxos Made Simple](http://pdos.csail.mit.edu/6.824-2013/papers/paxos-simple.pdf)
- [My Paxos Notes](/reading/papers/paxos-simple.html)


Paxos 键值存储系统包括

- 客户端（ client ）
- kvpaxos 服务器（ server ）
- Paxos 节点（ peers ）

其中 Paxos 节点部分以类库的形式运行在服务器之上，在 lab3 的整体模型类似于 [Paxos Made Simple](http://pdos.csail.mit.edu/6.824-2013/papers/paxos-simple.pdf) 第三节提到的状态机，其中 proposer、acceptor 和 learner 都是 Paxos 节点，**把整个键值存储服务看成一个状态机**，它会按照一定的顺序执行客户端发来的所有命令（ Put 请求），每个命令都确定性的把整个状态机向前推进一步。

在这里，这个状态机是由很多服务器共同构成的，这些服务器之间彼此要**保证执行的命令的顺序完全一致**，为此，我们维护一个有序序列 *list*，该序列就是所有服务器应当执行命令的顺序。

在服务器收到一个 Put(k, v) 请求之后

1. 在该序列中寻找到当前最小的空位 *list[n]*，也就是新命令应该存储的位置
2. 向 Paxos 节点 propose 在该位置上放置 *key=>value* 这个命令，注意同时可能有多个服务器尝试向 *list[n]* 这个位置放置命令，这时 Paxos 负责协调统一，决定最终放置在 *list[n]* 处的命令应该是什么
3. 对于单个服务器而言，如果最终 Paxos 决定放置在 *list[n]* 处的命令与其 propose 的相同，则放置命令成功，对 Put 命令的处理结束；反之，则继续尝试在 *list[n+1]* 处放置其 propose 的命令。


**How Put(key, value) and px.Start(seq, v) meet?**


**Log slot?**


**(* Paxos).Start(seq int, v interface{})**


**(* Paxos).Status(seq int) (decided bool, v interface{})**

## Part B

在 Part B 中，要在 Paxos 的基础之上实现一个键值存储系统，改系统所能处理的异常情况包括：

- TODO
- TODO

Part B 中存储系统的结构依然包括客户端、服务端，与 Lab2 中不同的是服务端彼此之间利用 Paxos 来达成共识，因此在该部分中 Paxos 是运行在存储系统服务端之下的辅助系统。下文中提到的客户端、服务端均指存储系统的客户端河服务端。

###基本工作原理

服务器本地保存一个请求队列，收到客户端的请求先缓存起来，每次服务器**只处理队列头的请求**。

每个Put请求都要添加一段随机的身份标识，当一个客户端向多个服务器发送请求的时候请求不会被重复处理。

服务器维护一个列表，表示已经达成共识的消息日志（操作历史），当服务器处理一个请求的时候，尝试添加改请求到列表下一个位置，并通过 Paxos 与其他服务器达成共识。为了解决客户端重复请求的情况，服务器应当先检查本地是否包含改身份标识的操作，确认为新操作之后再进行添加请求。当该请求添加成功之后，处理缓存中下一个请求。

**如何确定消息应该添加的位置？**
由于 Paxos 在收到 decide 信息的时候并不会主动通知上层，因此当请求到来的时候，服务器端保存的消息日志可能只有 n 个 slot，然而底层的 Paxos 达成共识的已经有 n+m 个了。所以服务器在处理请求队列时应当：**1.** 先同 Paxos 同步信息 **2.** 根据请求的身份标识判断是否是重复请求 **3.** 调用 Paxos.Start **4.** 轮询 Paxos.Status **5.** 请求占位成功，则返回，失败则返回第1步重新执行。

服务器端维护的消息日志与 Paxos 节点中维护的消息列表是相对应的，内容也是一致的。不过服务端列表是完整的，而且包含了语义信息，而 Paxos 作为服务系统，并不了解列表中值的具体意义，而且 Paxos 中维护的列表内容是作为缓冲而存在的，一旦服务器同步了 Paxos 列表中的信息，就可以通过 Paxos.Done 来清空 Paxos 中缓存的信息。

**Get请求直接从本地读取数据返回？** 
也当成一个操作，请求共识，根据最终决定的操作顺序返回相应的值。

一种可能的问题：客户端向服务器A发送了Put(a)=1的请求之后，又向服务器B发送Put(a)=2请求。因为Paxos请求并没有一个时间戳，所以可能出现发往B的请求先于发往A的请求达成了共识，造成**客户端的不一致**
