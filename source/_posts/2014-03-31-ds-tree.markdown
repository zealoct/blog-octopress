---
layout: post
title: "ds-tree"
date: 2014-03-31 21:21:33 +0800
comments: true
published: false
categories: 
- Algorithm
---

## Binary Search Tree

### AVL Tree

查询较快，适用于**一次构造、多次查询**的需求。     

### Red-Black Tree

相比平衡二叉树，红黑树在平衡性上限制并不严格，因此红黑树的修改操作（插入、删除）性能更优，但是查询操作稍慢。


#### Insertion

插入时首先找到要替换的叶子结点，用一个红色结点来代替，该红色结点的值即为要插入的值，节点的两个子节点为黑色的 NIL。

- **property 3** (叶子结点均为黑色) 总是成立。
- **property 4** (红色结点的两个孩子都是黑色节点) 下列情况可能会不成立：添加一个红色结点，把一个黑色结点变成红色，旋转
- **property 5** (从根到叶子结点的所有路径上包含的黑色结点的数量相同) 下列情况可能会不成立：添加黑色结点，改变结点颜色，旋转

Note: N, 当前节点; P, N 的父节点; G, N 的祖父; U, N 的叔叔（P 的兄弟）

- **Case 1:** N 为根, 改变其颜色为黑；
``` c
void insert_case1(struct node *n)
{
 if (n->parent == NULL)
  n->color = BLACK;
 else
  insert_case2(n);
}
```
- **Case 2:** P 为黑色，所有限制均满足，不需要变化；
``` c
void insert_case2(struct node *n)
{
if (n->parent->color == BLACK)
  return; /* Tree is still valid */
else
  insert_case3(n);
}
```
- **Case 3:** P 和 U 都是红色，则改变 P 和 U 为黑色，同时把 G 变成红色。此时 G 可能违反了限制2和4，需要递归的调整
``` c
void marnsert_case3(struct node *n)
{
struct node *u = uncle(n), *g;

if ((u != NULL) && (u->color == RED)) {
  n->parent->color = BLACK;
  u->color = BLACK;
  g = grandparent(n);
  g->color = RED;
  insert_case1(g);
} else {
  insert_case4(n);
}
}
```
- **Case 4:** P 是红色而 U 是黑色，且 N 是 P 的右子结点，则对 P 坐一次左旋操作，转为 Case 5；
```c
void insert_case4(struct node *n)
{
 struct node *g = grandparent(n);
 
 if ((n == n->parent->right) && (n->parent == g->left)) {
  rotate_left(n->parent);
 
 /*
 * rotate_left can be the below because of already having *g =  grandparent(n) 
 *
 * struct node *saved_p=g->left, *saved_left_n=n->left;
 * g->left=n; 
 * n->left=saved_p;
 * saved_p->right=saved_left_n;
 * 
 * and modify the parent's nodes properly
 */
 
  n = n->left; 
 
 } else if ((n == n->parent->left) && (n->parent == g->right)) {
  rotate_right(n->parent);
 
 /*
 * rotate_right can be the below to take advantage of already having *g =  grandparent(n) 
 *
 * struct node *saved_p=g->right, *saved_right_n=n->right;
 * g->right=n; 
 * n->right=saved_p;
 * saved_p->left=saved_right_n;
 * 
 */
 
  n = n->right; 
 }
 insert_case5(n);
}
```
- **Case 5:** P 是红色而 U 是黑色，且 N 是 P 的左子结点，则对 G 进行一次右旋操作，并把 G 标为红色，把 P 标为黑色。
``` c
void insert_case5(struct node *n)
{
struct node *g = grandparent(n);

n->parent->color = BLACK;
g->color = RED;
if (n == n->parent->left)
  rotate_right(g);
else
  rotate_left(g);
}
```


#### Removal



### Left-Leaning Red–Black Tree (LLRB)


